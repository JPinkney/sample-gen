{
  "definitions": {
    "v1alpha1.DevWorkspace": {
      "description": "DevWorkspace is the Schema for the devworkspaces API",
      "properties": {
        "apiVersion": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.apiVersion"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.kind"
        },
        "metadata": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.status"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.metadata": {
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec": {
      "description": "DevWorkspaceSpec defines the desired state of DevWorkspace",
      "properties": {
        "routingClass": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.routingClass"
        },
        "started": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.started"
        },
        "template": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template"
        }
      },
      "required": [
        "started"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.status": {
      "description": "DevWorkspaceStatus defines the observed state of DevWorkspace",
      "properties": {
        "conditions": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.status.conditions.items"
        },
        "ideUrl": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.status.ideUrl"
        },
        "message": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.status.message"
        },
        "phase": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.status.phase"
        },
        "workspaceId": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.status.workspaceId"
        }
      },
      "required": [
        "workspaceId"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.status.conditions": {
      "description": "WorkspaceCondition contains details for the current condition of this workspace.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.status.conditions.items.lastTransitionTime"
        },
        "message": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.status.conditions.items.message"
        },
        "reason": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.status.conditions.items.reason"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.status.conditions.items.status"
        },
        "type": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.status.conditions.items.type"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.status.ideUrl": {
      "description": "URL at which the Worksace Editor can be joined",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.status.message": {
      "description": "Message is a short user-readable message giving additional information about an object's state",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.status.phase": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.status.workspaceId": {
      "description": "Id of the workspace",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.status.conditions.items": {
      "description": "Conditions represent the latest available observations of an object's state",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.status.conditions"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.status.conditions.items.lastTransitionTime": {
      "description": "Last time the condition transitioned from one status to another.",
      "format": "date-time",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.status.conditions.items.message": {
      "description": "Human-readable message indicating details about last transition.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.status.conditions.items.reason": {
      "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.status.conditions.items.status": {
      "description": "Phase is the status of the condition. Can be True, False, Unknown.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.status.conditions.items.type": {
      "description": "Type is the type of the condition.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.routingClass": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.started": {
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template": {
      "description": "Structure of the workspace. This is also the specification of a workspace template.",
      "properties": {
        "commands": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items"
        },
        "components": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items"
        },
        "events": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.events"
        },
        "parent": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent"
        },
        "projects": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items"
        },
        "starterProjects": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands": {
      "properties": {
        "apply": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.apply"
        },
        "commandType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.commandType"
        },
        "composite": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.composite"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.custom"
        },
        "exec": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec"
        },
        "vscodeLaunch": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch"
        },
        "vscodeTask": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components": {
      "properties": {
        "componentType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.componentType"
        },
        "container": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.custom"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes"
        },
        "openshift": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift"
        },
        "plugin": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin"
        },
        "volume": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.volume"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.events": {
      "description": "Bindings of commands to events. Each command is referred-to by its name.",
      "properties": {
        "postStart": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.events.postStart.items"
        },
        "postStop": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.events.postStop.items"
        },
        "preStart": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.events.preStart.items"
        },
        "preStop": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.events.preStop.items"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent": {
      "description": "Parent workspace template",
      "properties": {
        "commands": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items"
        },
        "components": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.id"
        },
        "importReferenceType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.importReferenceType"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.kubernetes"
        },
        "projects": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items"
        },
        "registryUrl": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.registryUrl"
        },
        "starterProjects": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.uri"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects": {
      "properties": {
        "clonePath": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.clonePath"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.custom"
        },
        "git": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.git"
        },
        "github": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.github"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.name"
        },
        "sourceType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.sourceType"
        },
        "zip": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.zip"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects": {
      "properties": {
        "clonePath": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.clonePath"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.custom"
        },
        "description": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.description"
        },
        "git": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.git"
        },
        "github": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.github"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.name"
        },
        "sourceType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.sourceType"
        },
        "zip": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.zip"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items": {
      "description": "StarterProjects is a project that can be used as a starting point when bootstrapping new projects",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.clonePath": {
      "description": "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.custom": {
      "description": "Project's Custom source",
      "properties": {
        "embeddedResource": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.custom.embeddedResource"
        },
        "projectSourceClass": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.custom.projectSourceClass"
        }
      },
      "required": [
        "embeddedResource",
        "projectSourceClass"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.description": {
      "description": "Description of a starter project",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.git": {
      "description": "Project's Git source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.git.checkoutFrom"
        },
        "remotes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.git.remotes"
        },
        "sparseCheckoutDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.git.sparseCheckoutDir"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.github": {
      "description": "Project's GitHub source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.github.checkoutFrom"
        },
        "remotes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.github.remotes"
        },
        "sparseCheckoutDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.github.sparseCheckoutDir"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.name": {
      "description": "Project name",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.sourceType": {
      "description": "Type of project source",
      "enum": [
        "Git",
        "Github",
        "Zip",
        "Custom"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.zip": {
      "description": "Project's Zip source",
      "properties": {
        "location": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.zip.location"
        },
        "sparseCheckoutDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.zip.sparseCheckoutDir"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.zip.location": {
      "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.zip.sparseCheckoutDir": {
      "description": "Part of project to populate in the working directory.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.github.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.github.checkoutFrom.remote"
        },
        "revision": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.github.checkoutFrom.revision"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.github.remotes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.github.sparseCheckoutDir": {
      "description": "Part of project to populate in the working directory.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.github.checkoutFrom.remote": {
      "description": "The remote name should be used as init. Required if there are more than one remote configured",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.github.checkoutFrom.revision": {
      "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.git.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.git.checkoutFrom.remote"
        },
        "revision": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.git.checkoutFrom.revision"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.git.remotes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.git.sparseCheckoutDir": {
      "description": "Part of project to populate in the working directory.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.git.checkoutFrom.remote": {
      "description": "The remote name should be used as init. Required if there are more than one remote configured",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.git.checkoutFrom.revision": {
      "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.custom.embeddedResource": {
      "type": "object",
      "x-kubernetes-embedded-resource": true,
      "x-kubernetes-preserve-unknown-fields": true
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.custom.projectSourceClass": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items": {
      "description": "Projects worked on in the workspace, containing names and sources locations",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.clonePath": {
      "description": "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.custom": {
      "description": "Project's Custom source",
      "properties": {
        "embeddedResource": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.custom.embeddedResource"
        },
        "projectSourceClass": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.custom.projectSourceClass"
        }
      },
      "required": [
        "embeddedResource",
        "projectSourceClass"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.git": {
      "description": "Project's Git source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.git.checkoutFrom"
        },
        "remotes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.git.remotes"
        },
        "sparseCheckoutDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.git.sparseCheckoutDir"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.github": {
      "description": "Project's GitHub source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.github.checkoutFrom"
        },
        "remotes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.github.remotes"
        },
        "sparseCheckoutDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.github.sparseCheckoutDir"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.name": {
      "description": "Project name",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.sourceType": {
      "description": "Type of project source",
      "enum": [
        "Git",
        "Github",
        "Zip",
        "Custom"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.zip": {
      "description": "Project's Zip source",
      "properties": {
        "location": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.zip.location"
        },
        "sparseCheckoutDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.zip.sparseCheckoutDir"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.zip.location": {
      "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.zip.sparseCheckoutDir": {
      "description": "Part of project to populate in the working directory.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.github.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.github.checkoutFrom.remote"
        },
        "revision": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.github.checkoutFrom.revision"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.github.remotes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.github.sparseCheckoutDir": {
      "description": "Part of project to populate in the working directory.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.github.checkoutFrom.remote": {
      "description": "The remote name should be used as init. Required if there are more than one remote configured",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.github.checkoutFrom.revision": {
      "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.git.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.git.checkoutFrom.remote"
        },
        "revision": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.git.checkoutFrom.revision"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.git.remotes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.git.sparseCheckoutDir": {
      "description": "Part of project to populate in the working directory.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.git.checkoutFrom.remote": {
      "description": "The remote name should be used as init. Required if there are more than one remote configured",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.git.checkoutFrom.revision": {
      "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.custom.embeddedResource": {
      "type": "object",
      "x-kubernetes-embedded-resource": true,
      "x-kubernetes-preserve-unknown-fields": true
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.custom.projectSourceClass": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands": {
      "properties": {
        "apply": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply"
        },
        "commandType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.commandType"
        },
        "composite": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom"
        },
        "exec": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec"
        },
        "vscodeLaunch": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch"
        },
        "vscodeTask": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components": {
      "properties": {
        "componentType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.componentType"
        },
        "container": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.custom"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes"
        },
        "openshift": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift"
        },
        "plugin": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin"
        },
        "volume": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.volume"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.id": {
      "description": "Id in a registry that contains a Devfile yaml file",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.importReferenceType": {
      "description": "type of location from where the referenced template structure should be retrieved",
      "enum": [
        "Uri",
        "Id",
        "Kubernetes"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.kubernetes": {
      "description": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.kubernetes.name"
        },
        "namespace": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.kubernetes.namespace"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects": {
      "properties": {
        "clonePath": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.clonePath"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.custom"
        },
        "git": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.git"
        },
        "github": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.github"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.name"
        },
        "sourceType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.sourceType"
        },
        "zip": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.zip"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.registryUrl": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects": {
      "properties": {
        "clonePath": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.clonePath"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.custom"
        },
        "description": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.description"
        },
        "git": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git"
        },
        "github": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.name"
        },
        "sourceType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.sourceType"
        },
        "zip": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.zip"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.uri": {
      "description": "Uri of a Devfile yaml file",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items": {
      "description": "Overrides of starter projects encapsulated in a parent devfile Overriding is done using a strategic merge patch.",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.clonePath": {
      "description": "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.custom": {
      "description": "Project's Custom source",
      "properties": {
        "embeddedResource": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.custom.embeddedResource"
        },
        "projectSourceClass": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.custom.projectSourceClass"
        }
      },
      "required": [
        "embeddedResource",
        "projectSourceClass"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.description": {
      "description": "Description of a starter project",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git": {
      "description": "Project's Git source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git.checkoutFrom"
        },
        "remotes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git.remotes"
        },
        "sparseCheckoutDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git.sparseCheckoutDir"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github": {
      "description": "Project's GitHub source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github.checkoutFrom"
        },
        "remotes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github.remotes"
        },
        "sparseCheckoutDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github.sparseCheckoutDir"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.name": {
      "description": "Project name",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.sourceType": {
      "description": "Type of project source",
      "enum": [
        "Git",
        "Github",
        "Zip",
        "Custom"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.zip": {
      "description": "Project's Zip source",
      "properties": {
        "location": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.zip.location"
        },
        "sparseCheckoutDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.zip.sparseCheckoutDir"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.zip.location": {
      "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.zip.sparseCheckoutDir": {
      "description": "Part of project to populate in the working directory.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github.checkoutFrom.remote"
        },
        "revision": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github.checkoutFrom.revision"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github.remotes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github.sparseCheckoutDir": {
      "description": "Part of project to populate in the working directory.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github.checkoutFrom.remote": {
      "description": "The remote name should be used as init. Required if there are more than one remote configured",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github.checkoutFrom.revision": {
      "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git.checkoutFrom.remote"
        },
        "revision": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git.checkoutFrom.revision"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git.remotes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git.sparseCheckoutDir": {
      "description": "Part of project to populate in the working directory.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git.checkoutFrom.remote": {
      "description": "The remote name should be used as init. Required if there are more than one remote configured",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git.checkoutFrom.revision": {
      "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.custom.embeddedResource": {
      "type": "object",
      "x-kubernetes-embedded-resource": true,
      "x-kubernetes-preserve-unknown-fields": true
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.custom.projectSourceClass": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items": {
      "description": "Overrides of projects encapsulated in a parent devfile. Overriding is done using a strategic merge patch.",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.clonePath": {
      "description": "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.custom": {
      "description": "Project's Custom source",
      "properties": {
        "embeddedResource": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.custom.embeddedResource"
        },
        "projectSourceClass": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.custom.projectSourceClass"
        }
      },
      "required": [
        "embeddedResource",
        "projectSourceClass"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.git": {
      "description": "Project's Git source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.git.checkoutFrom"
        },
        "remotes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.git.remotes"
        },
        "sparseCheckoutDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.git.sparseCheckoutDir"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.github": {
      "description": "Project's GitHub source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.github.checkoutFrom"
        },
        "remotes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.github.remotes"
        },
        "sparseCheckoutDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.github.sparseCheckoutDir"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.name": {
      "description": "Project name",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.sourceType": {
      "description": "Type of project source",
      "enum": [
        "Git",
        "Github",
        "Zip",
        "Custom"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.zip": {
      "description": "Project's Zip source",
      "properties": {
        "location": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.zip.location"
        },
        "sparseCheckoutDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.zip.sparseCheckoutDir"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.zip.location": {
      "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.zip.sparseCheckoutDir": {
      "description": "Part of project to populate in the working directory.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.github.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.github.checkoutFrom.remote"
        },
        "revision": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.github.checkoutFrom.revision"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.github.remotes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.github.sparseCheckoutDir": {
      "description": "Part of project to populate in the working directory.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.github.checkoutFrom.remote": {
      "description": "The remote name should be used as init. Required if there are more than one remote configured",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.github.checkoutFrom.revision": {
      "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.git.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.git.checkoutFrom.remote"
        },
        "revision": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.git.checkoutFrom.revision"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.git.remotes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.git.sparseCheckoutDir": {
      "description": "Part of project to populate in the working directory.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.git.checkoutFrom.remote": {
      "description": "The remote name should be used as init. Required if there are more than one remote configured",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.git.checkoutFrom.revision": {
      "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.custom.embeddedResource": {
      "type": "object",
      "x-kubernetes-embedded-resource": true,
      "x-kubernetes-preserve-unknown-fields": true
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.custom.projectSourceClass": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.kubernetes.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.kubernetes.namespace": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items": {
      "description": "Overrides of components encapsulated in a parent devfile. Overriding is done using a strategic merge patch",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.componentType": {
      "description": "Type of component",
      "enum": [
        "Container",
        "Kubernetes",
        "Openshift",
        "Volume",
        "Plugin",
        "Custom"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container": {
      "description": "Allows adding and configuring workspace-related containers",
      "properties": {
        "args": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.args.items"
        },
        "command": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.command.items"
        },
        "dedicatedPod": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.dedicatedPod"
        },
        "endpoints": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items"
        },
        "env": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.env.items"
        },
        "image": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.image"
        },
        "memoryLimit": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.memoryLimit"
        },
        "mountSources": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.mountSources"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.name"
        },
        "sourceMapping": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.sourceMapping"
        },
        "volumeMounts": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.volumeMounts.items"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.custom": {
      "description": "Custom component whose logic is implementation-dependant and should be provided by the user possibly through some dedicated controller",
      "properties": {
        "componentClass": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.custom.componentClass"
        },
        "embeddedResource": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.custom.embeddedResource"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.custom.name"
        }
      },
      "required": [
        "componentClass",
        "embeddedResource",
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes": {
      "description": "Allows importing into the workspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.",
      "properties": {
        "endpoints": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.locationType"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.name"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.uri"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift": {
      "description": "Allows importing into the workspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.",
      "properties": {
        "endpoints": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.locationType"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.name"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.uri"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin": {
      "description": "Allows importing a plugin. \n Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources",
      "properties": {
        "commands": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items"
        },
        "components": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.id"
        },
        "importReferenceType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.importReferenceType"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.kubernetes"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.name"
        },
        "registryUrl": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.registryUrl"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.uri"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.volume": {
      "description": "Allows specifying the definition of a volume shared by several other components",
      "properties": {
        "ephemeral": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.volume.ephemeral"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.volume.name"
        },
        "size": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.volume.size"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.volume.ephemeral": {
      "description": "Ephemeral volumes are not stored persistently across restarts. Defaults to false",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.volume.name": {
      "description": "Mandatory name that allows referencing the Volume component in Container volume mounts or inside a parent",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.volume.size": {
      "description": "Size of the volume",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands": {
      "properties": {
        "apply": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply"
        },
        "commandType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.commandType"
        },
        "composite": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom"
        },
        "exec": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec"
        },
        "vscodeLaunch": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch"
        },
        "vscodeTask": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components": {
      "properties": {
        "componentType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.componentType"
        },
        "container": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes"
        },
        "openshift": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift"
        },
        "volume": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.volume"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.id": {
      "description": "Id in a registry that contains a Devfile yaml file",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.importReferenceType": {
      "description": "type of location from where the referenced template structure should be retrieved",
      "enum": [
        "Uri",
        "Id",
        "Kubernetes"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.kubernetes": {
      "description": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.kubernetes.name"
        },
        "namespace": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.kubernetes.namespace"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.name": {
      "description": "Optional name that allows referencing the component in commands, or inside a parent If omitted it will be infered from the location (uri or registryEntry)",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.registryUrl": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.uri": {
      "description": "Uri of a Devfile yaml file",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.kubernetes.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.kubernetes.namespace": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items": {
      "description": "Overrides of components encapsulated in a plugin. Overriding is done using a strategic merge patch. A plugin cannot override embedded plugin components.",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.componentType": {
      "description": "Type of component override for a plugin",
      "enum": [
        "Container",
        "Kubernetes",
        "Openshift",
        "Volume"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container": {
      "description": "Configuration overriding for a Container component in a plugin",
      "properties": {
        "args": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.args.items"
        },
        "command": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.command.items"
        },
        "dedicatedPod": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.dedicatedPod"
        },
        "endpoints": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items"
        },
        "env": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.env.items"
        },
        "image": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.image"
        },
        "memoryLimit": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.memoryLimit"
        },
        "mountSources": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.mountSources"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.name"
        },
        "sourceMapping": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.sourceMapping"
        },
        "volumeMounts": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.volumeMounts.items"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes": {
      "description": "Configuration overriding for a Kubernetes component in a plugin",
      "properties": {
        "endpoints": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.locationType"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.name"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.uri"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift": {
      "description": "Configuration overriding for an OpenShift component in a plugin",
      "properties": {
        "endpoints": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.locationType"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.name"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.uri"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.volume": {
      "description": "Configuration overriding for a Volume component in a plugin",
      "properties": {
        "ephemeral": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.volume.ephemeral"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.volume.name"
        },
        "size": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.volume.size"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.volume.ephemeral": {
      "description": "Ephemeral volumes are not stored persistently across restarts. Defaults to false",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.volume.name": {
      "description": "Mandatory name that allows referencing the Volume component in Container volume mounts or inside a parent",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.volume.size": {
      "description": "Size of the volume",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints": {
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items.attributes"
        },
        "exposure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items.exposure"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items.path"
        },
        "protocol": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items.protocol"
        },
        "secure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items.secure"
        },
        "targetPort": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items.targetPort"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.inlined": {
      "description": "Inlined manifest",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.locationType": {
      "description": "Type of Kubernetes-like location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.name": {
      "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.uri": {
      "description": "Location in a file fetched from a uri.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items": {
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items.exposure": {
      "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
      "enum": [
        "public",
        "internal",
        "none"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items.path": {
      "description": "Path of the endpoint URL",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items.protocol": {
      "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items.secure": {
      "description": "Describes whether the endpoint should be secured and protected by some authentication process",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints.items.targetPort": {
      "type": "integer"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints": {
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items.attributes"
        },
        "exposure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items.exposure"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items.path"
        },
        "protocol": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items.protocol"
        },
        "secure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items.secure"
        },
        "targetPort": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items.targetPort"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.inlined": {
      "description": "Inlined manifest",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.locationType": {
      "description": "Type of Kubernetes-like location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.name": {
      "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.uri": {
      "description": "Location in a file fetched from a uri.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items": {
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items.exposure": {
      "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
      "enum": [
        "public",
        "internal",
        "none"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items.path": {
      "description": "Path of the endpoint URL",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items.protocol": {
      "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items.secure": {
      "description": "Describes whether the endpoint should be secured and protected by some authentication process",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints.items.targetPort": {
      "type": "integer"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.args": {
      "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.command": {
      "description": "The command to run in the dockerimage component instead of the default one provided in the image. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.dedicatedPod": {
      "description": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. \n Default value is `false`",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints": {
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items.attributes"
        },
        "exposure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items.exposure"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items.path"
        },
        "protocol": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items.protocol"
        },
        "secure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items.secure"
        },
        "targetPort": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items.targetPort"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.env": {
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.env.items.name"
        },
        "value": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.env.items.value"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.image": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.memoryLimit": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.mountSources": {
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.sourceMapping": {
      "description": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the value of the `PROJECTS_ROOT` environment variable is used.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.volumeMounts": {
      "description": "Volume that should be mounted to a component container",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.volumeMounts.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.volumeMounts.items.path"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.volumeMounts.items": {
      "description": "List of volumes mounts that should be mounted is this container.",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.volumeMounts"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.volumeMounts.items.name": {
      "description": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.volumeMounts.items.path": {
      "description": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.env.items": {
      "description": "Environment variables used in this container",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.env"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.env.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.env.items.value": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items": {
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items.exposure": {
      "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
      "enum": [
        "public",
        "internal",
        "none"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items.path": {
      "description": "Path of the endpoint URL",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items.protocol": {
      "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items.secure": {
      "description": "Describes whether the endpoint should be secured and protected by some authentication process",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints.items.targetPort": {
      "type": "integer"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.command.items": {
      "description": "The command to run in the dockerimage component instead of the default one provided in the image. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.args.items": {
      "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items": {
      "description": "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done using a strategic merge patch",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply": {
      "description": "Command that consists in applying a given component definition, typically bound to a workspace event. \n For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. \n When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.attributes"
        },
        "component": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.component"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.label"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.commandType": {
      "description": "Type of workspace command",
      "enum": [
        "Exec",
        "Apply",
        "VscodeTask",
        "VscodeLaunch",
        "Composite",
        "Custom"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite": {
      "description": "Composite command that allows executing several sub-commands either sequentially or concurrently",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.attributes"
        },
        "commands": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.commands.items"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.label"
        },
        "parallel": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.parallel"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom": {
      "description": "Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.attributes"
        },
        "commandClass": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.commandClass"
        },
        "embeddedResource": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.embeddedResource"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.label"
        }
      },
      "required": [
        "commandClass",
        "embeddedResource",
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec": {
      "description": "CLI Command executed in an existing component container",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.attributes"
        },
        "commandLine": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.commandLine"
        },
        "component": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.component"
        },
        "env": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.env.items"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.group"
        },
        "hotReloadCapable": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.hotReloadCapable"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.label"
        },
        "workingDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.workingDir"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch": {
      "description": "Command providing the definition of a VsCode launch action \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.attributes"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.id"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.locationType"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.uri"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask": {
      "description": "Command providing the definition of a VsCode Task \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.attributes"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.id"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.locationType"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.uri"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.inlined": {
      "description": "Inlined content of the VsCode configuration",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.locationType": {
      "description": "Type of Vscode configuration command location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.uri": {
      "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.inlined": {
      "description": "Inlined content of the VsCode configuration",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.locationType": {
      "description": "Type of Vscode configuration command location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.uri": {
      "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.commandLine": {
      "description": "The actual command-line string \n Special variables that can be used: \n  - `$PROJECTS_ROOT`: A path where projects sources are mounted \n  - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.component": {
      "description": "Describes component to which given action relates",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.env": {
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.env.items.name"
        },
        "value": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.env.items.value"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.hotReloadCapable": {
      "description": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own. \n Default value is `false`",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.workingDir": {
      "description": "Working directory where the command should be executed \n Special variables that can be used: \n  - `${PROJECTS_ROOT}`: A path where projects sources are mounted \n  - `${PROJECT_SOURCE}`: A path to a project source (${PROJECTS_ROOT}/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.env.items": {
      "description": "Optional list of environment variables that have to be set before running the command",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.env"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.env.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.env.items.value": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.commandClass": {
      "description": "Class of command that the associated implementation component should use to process this command with the appropriate logic",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.embeddedResource": {
      "description": "Additional free-form configuration for this custom command that the implementation component will know how to use",
      "type": "object",
      "x-kubernetes-embedded-resource": true,
      "x-kubernetes-preserve-unknown-fields": true
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.commands": {
      "description": "The commands that comprise this composite command",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.parallel": {
      "description": "Indicates if the sub-commands should be executed concurrently",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.commands.items": {
      "description": "The commands that comprise this composite command",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.component": {
      "description": "Describes component that will be applied",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints": {
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items.attributes"
        },
        "exposure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items.exposure"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items.path"
        },
        "protocol": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items.protocol"
        },
        "secure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items.secure"
        },
        "targetPort": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items.targetPort"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.inlined": {
      "description": "Inlined manifest",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.locationType": {
      "description": "Type of Kubernetes-like location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.name": {
      "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.uri": {
      "description": "Location in a file fetched from a uri.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items": {
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items.exposure": {
      "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
      "enum": [
        "public",
        "internal",
        "none"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items.path": {
      "description": "Path of the endpoint URL",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items.protocol": {
      "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items.secure": {
      "description": "Describes whether the endpoint should be secured and protected by some authentication process",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints.items.targetPort": {
      "type": "integer"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints": {
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items.attributes"
        },
        "exposure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items.exposure"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items.path"
        },
        "protocol": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items.protocol"
        },
        "secure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items.secure"
        },
        "targetPort": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items.targetPort"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.inlined": {
      "description": "Inlined manifest",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.locationType": {
      "description": "Type of Kubernetes-like location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.name": {
      "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.uri": {
      "description": "Location in a file fetched from a uri.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items": {
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items.exposure": {
      "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
      "enum": [
        "public",
        "internal",
        "none"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items.path": {
      "description": "Path of the endpoint URL",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items.protocol": {
      "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items.secure": {
      "description": "Describes whether the endpoint should be secured and protected by some authentication process",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints.items.targetPort": {
      "type": "integer"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.custom.componentClass": {
      "description": "Class of component that the associated implementation controller should use to process this command with the appropriate logic",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.custom.embeddedResource": {
      "description": "Additional free-form configuration for this custom component that the implementation controller will know how to use",
      "type": "object",
      "x-kubernetes-embedded-resource": true,
      "x-kubernetes-preserve-unknown-fields": true
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.custom.name": {
      "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.args": {
      "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.command": {
      "description": "The command to run in the dockerimage component instead of the default one provided in the image. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.dedicatedPod": {
      "description": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. \n Default value is `false`",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints": {
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items.attributes"
        },
        "exposure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items.exposure"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items.path"
        },
        "protocol": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items.protocol"
        },
        "secure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items.secure"
        },
        "targetPort": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items.targetPort"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.env": {
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.env.items.name"
        },
        "value": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.env.items.value"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.image": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.memoryLimit": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.mountSources": {
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.sourceMapping": {
      "description": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the value of the `PROJECTS_ROOT` environment variable is used.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.volumeMounts": {
      "description": "Volume that should be mounted to a component container",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.volumeMounts.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.volumeMounts.items.path"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.volumeMounts.items": {
      "description": "List of volumes mounts that should be mounted is this container.",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.volumeMounts"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.volumeMounts.items.name": {
      "description": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.volumeMounts.items.path": {
      "description": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.env.items": {
      "description": "Environment variables used in this container",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.env"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.env.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.env.items.value": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items": {
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items.exposure": {
      "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
      "enum": [
        "public",
        "internal",
        "none"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items.path": {
      "description": "Path of the endpoint URL",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items.protocol": {
      "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items.secure": {
      "description": "Describes whether the endpoint should be secured and protected by some authentication process",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints.items.targetPort": {
      "type": "integer"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.command.items": {
      "description": "The command to run in the dockerimage component instead of the default one provided in the image. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.args.items": {
      "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items": {
      "description": "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done using a strategic merge patch",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply": {
      "description": "Command that consists in applying a given component definition, typically bound to a workspace event. \n For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. \n When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.attributes"
        },
        "component": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.component"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.label"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.commandType": {
      "description": "Type of workspace command",
      "enum": [
        "Exec",
        "Apply",
        "VscodeTask",
        "VscodeLaunch",
        "Composite",
        "Custom"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite": {
      "description": "Composite command that allows executing several sub-commands either sequentially or concurrently",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.attributes"
        },
        "commands": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.commands.items"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.label"
        },
        "parallel": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.parallel"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom": {
      "description": "Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.attributes"
        },
        "commandClass": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.commandClass"
        },
        "embeddedResource": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.embeddedResource"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.label"
        }
      },
      "required": [
        "commandClass",
        "embeddedResource",
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec": {
      "description": "CLI Command executed in an existing component container",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.attributes"
        },
        "commandLine": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.commandLine"
        },
        "component": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.component"
        },
        "env": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.env.items"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.group"
        },
        "hotReloadCapable": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.hotReloadCapable"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.label"
        },
        "workingDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.workingDir"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch": {
      "description": "Command providing the definition of a VsCode launch action \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.attributes"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.id"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.locationType"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.uri"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask": {
      "description": "Command providing the definition of a VsCode Task \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.attributes"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.id"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.locationType"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.uri"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.inlined": {
      "description": "Inlined content of the VsCode configuration",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.locationType": {
      "description": "Type of Vscode configuration command location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.uri": {
      "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.inlined": {
      "description": "Inlined content of the VsCode configuration",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.locationType": {
      "description": "Type of Vscode configuration command location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.uri": {
      "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.commandLine": {
      "description": "The actual command-line string \n Special variables that can be used: \n  - `$PROJECTS_ROOT`: A path where projects sources are mounted \n  - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.component": {
      "description": "Describes component to which given action relates",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.env": {
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.env.items.name"
        },
        "value": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.env.items.value"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.hotReloadCapable": {
      "description": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own. \n Default value is `false`",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.workingDir": {
      "description": "Working directory where the command should be executed \n Special variables that can be used: \n  - `${PROJECTS_ROOT}`: A path where projects sources are mounted \n  - `${PROJECT_SOURCE}`: A path to a project source (${PROJECTS_ROOT}/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.env.items": {
      "description": "Optional list of environment variables that have to be set before running the command",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.env"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.env.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.env.items.value": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.commandClass": {
      "description": "Class of command that the associated implementation component should use to process this command with the appropriate logic",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.embeddedResource": {
      "description": "Additional free-form configuration for this custom command that the implementation component will know how to use",
      "type": "object",
      "x-kubernetes-embedded-resource": true,
      "x-kubernetes-preserve-unknown-fields": true
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.commands": {
      "description": "The commands that comprise this composite command",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.parallel": {
      "description": "Indicates if the sub-commands should be executed concurrently",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.commands.items": {
      "description": "The commands that comprise this composite command",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.component": {
      "description": "Describes component that will be applied",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.events.postStart": {
      "description": "Names of commands that should be executed after the workspace is completely started. In the case of Che-Theia, these commands should be executed after all plugins and extensions have started, including project cloning. This means that those commands are not triggered until the user opens the IDE in his browser.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.events.postStop": {
      "description": "Names of commands that should be executed after stopping the workspace.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.events.preStart": {
      "description": "Names of commands that should be executed before the workspace start. Kubernetes-wise, these commands would typically be executed in init containers of the workspace POD.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.events.preStop": {
      "description": "Names of commands that should be executed before stopping the workspace.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.events.preStop.items": {
      "description": "Names of commands that should be executed before stopping the workspace.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.events.preStart.items": {
      "description": "Names of commands that should be executed before the workspace start. Kubernetes-wise, these commands would typically be executed in init containers of the workspace POD.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.events.postStop.items": {
      "description": "Names of commands that should be executed after stopping the workspace.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.events.postStart.items": {
      "description": "Names of commands that should be executed after the workspace is completely started. In the case of Che-Theia, these commands should be executed after all plugins and extensions have started, including project cloning. This means that those commands are not triggered until the user opens the IDE in his browser.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items": {
      "description": "List of the workspace components, such as editor and plugins, user-provided containers, or other types of components",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.componentType": {
      "description": "Type of component",
      "enum": [
        "Container",
        "Kubernetes",
        "Openshift",
        "Volume",
        "Plugin",
        "Custom"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container": {
      "description": "Allows adding and configuring workspace-related containers",
      "properties": {
        "args": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.args.items"
        },
        "command": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.command.items"
        },
        "dedicatedPod": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.dedicatedPod"
        },
        "endpoints": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items"
        },
        "env": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.env.items"
        },
        "image": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.image"
        },
        "memoryLimit": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.memoryLimit"
        },
        "mountSources": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.mountSources"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.name"
        },
        "sourceMapping": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.sourceMapping"
        },
        "volumeMounts": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.volumeMounts.items"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.custom": {
      "description": "Custom component whose logic is implementation-dependant and should be provided by the user possibly through some dedicated controller",
      "properties": {
        "componentClass": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.custom.componentClass"
        },
        "embeddedResource": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.custom.embeddedResource"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.custom.name"
        }
      },
      "required": [
        "componentClass",
        "embeddedResource",
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes": {
      "description": "Allows importing into the workspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.",
      "properties": {
        "endpoints": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.locationType"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.name"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.uri"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift": {
      "description": "Allows importing into the workspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.",
      "properties": {
        "endpoints": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift.locationType"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift.name"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift.uri"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin": {
      "description": "Allows importing a plugin. \n Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources",
      "properties": {
        "commands": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items"
        },
        "components": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.id"
        },
        "importReferenceType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.importReferenceType"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.kubernetes"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.name"
        },
        "registryUrl": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.registryUrl"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.uri"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.volume": {
      "description": "Allows specifying the definition of a volume shared by several other components",
      "properties": {
        "ephemeral": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.volume.ephemeral"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.volume.name"
        },
        "size": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.volume.size"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.volume.ephemeral": {
      "description": "Ephemeral volumes are not stored persistently across restarts. Defaults to false",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.volume.name": {
      "description": "Mandatory name that allows referencing the Volume component in Container volume mounts or inside a parent",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.volume.size": {
      "description": "Size of the volume",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands": {
      "properties": {
        "apply": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply"
        },
        "commandType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.commandType"
        },
        "composite": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom"
        },
        "exec": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec"
        },
        "vscodeLaunch": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch"
        },
        "vscodeTask": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components": {
      "properties": {
        "componentType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.componentType"
        },
        "container": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes"
        },
        "openshift": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift"
        },
        "volume": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.volume"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.id": {
      "description": "Id in a registry that contains a Devfile yaml file",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.importReferenceType": {
      "description": "type of location from where the referenced template structure should be retrieved",
      "enum": [
        "Uri",
        "Id",
        "Kubernetes"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.kubernetes": {
      "description": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.kubernetes.name"
        },
        "namespace": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.kubernetes.namespace"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.name": {
      "description": "Optional name that allows referencing the component in commands, or inside a parent If omitted it will be infered from the location (uri or registryEntry)",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.registryUrl": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.uri": {
      "description": "Uri of a Devfile yaml file",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.kubernetes.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.kubernetes.namespace": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items": {
      "description": "Overrides of components encapsulated in a plugin. Overriding is done using a strategic merge patch. A plugin cannot override embedded plugin components.",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.componentType": {
      "description": "Type of component override for a plugin",
      "enum": [
        "Container",
        "Kubernetes",
        "Openshift",
        "Volume"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container": {
      "description": "Configuration overriding for a Container component in a plugin",
      "properties": {
        "args": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.args.items"
        },
        "command": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.command.items"
        },
        "dedicatedPod": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.dedicatedPod"
        },
        "endpoints": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items"
        },
        "env": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.env.items"
        },
        "image": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.image"
        },
        "memoryLimit": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.memoryLimit"
        },
        "mountSources": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.mountSources"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.name"
        },
        "sourceMapping": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.sourceMapping"
        },
        "volumeMounts": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.volumeMounts.items"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes": {
      "description": "Configuration overriding for a Kubernetes component in a plugin",
      "properties": {
        "endpoints": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.locationType"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.name"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.uri"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift": {
      "description": "Configuration overriding for an OpenShift component in a plugin",
      "properties": {
        "endpoints": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.locationType"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.name"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.uri"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.volume": {
      "description": "Configuration overriding for a Volume component in a plugin",
      "properties": {
        "ephemeral": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.volume.ephemeral"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.volume.name"
        },
        "size": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.volume.size"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.volume.ephemeral": {
      "description": "Ephemeral volumes are not stored persistently across restarts. Defaults to false",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.volume.name": {
      "description": "Mandatory name that allows referencing the Volume component in Container volume mounts or inside a parent",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.volume.size": {
      "description": "Size of the volume",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints": {
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items.attributes"
        },
        "exposure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items.exposure"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items.path"
        },
        "protocol": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items.protocol"
        },
        "secure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items.secure"
        },
        "targetPort": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items.targetPort"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.inlined": {
      "description": "Inlined manifest",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.locationType": {
      "description": "Type of Kubernetes-like location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.name": {
      "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.uri": {
      "description": "Location in a file fetched from a uri.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items": {
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items.exposure": {
      "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
      "enum": [
        "public",
        "internal",
        "none"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items.path": {
      "description": "Path of the endpoint URL",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items.protocol": {
      "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items.secure": {
      "description": "Describes whether the endpoint should be secured and protected by some authentication process",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints.items.targetPort": {
      "type": "integer"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints": {
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items.attributes"
        },
        "exposure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items.exposure"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items.path"
        },
        "protocol": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items.protocol"
        },
        "secure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items.secure"
        },
        "targetPort": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items.targetPort"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.inlined": {
      "description": "Inlined manifest",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.locationType": {
      "description": "Type of Kubernetes-like location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.name": {
      "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.uri": {
      "description": "Location in a file fetched from a uri.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items": {
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items.exposure": {
      "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
      "enum": [
        "public",
        "internal",
        "none"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items.path": {
      "description": "Path of the endpoint URL",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items.protocol": {
      "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items.secure": {
      "description": "Describes whether the endpoint should be secured and protected by some authentication process",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints.items.targetPort": {
      "type": "integer"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.args": {
      "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.command": {
      "description": "The command to run in the dockerimage component instead of the default one provided in the image. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.dedicatedPod": {
      "description": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. \n Default value is `false`",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints": {
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items.attributes"
        },
        "exposure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items.exposure"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items.path"
        },
        "protocol": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items.protocol"
        },
        "secure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items.secure"
        },
        "targetPort": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items.targetPort"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.env": {
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.env.items.name"
        },
        "value": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.env.items.value"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.image": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.memoryLimit": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.mountSources": {
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.sourceMapping": {
      "description": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the value of the `PROJECTS_ROOT` environment variable is used.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.volumeMounts": {
      "description": "Volume that should be mounted to a component container",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.volumeMounts.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.volumeMounts.items.path"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.volumeMounts.items": {
      "description": "List of volumes mounts that should be mounted is this container.",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.volumeMounts"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.volumeMounts.items.name": {
      "description": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.volumeMounts.items.path": {
      "description": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.env.items": {
      "description": "Environment variables used in this container",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.env"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.env.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.env.items.value": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items": {
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items.exposure": {
      "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
      "enum": [
        "public",
        "internal",
        "none"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items.path": {
      "description": "Path of the endpoint URL",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items.protocol": {
      "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items.secure": {
      "description": "Describes whether the endpoint should be secured and protected by some authentication process",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints.items.targetPort": {
      "type": "integer"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.command.items": {
      "description": "The command to run in the dockerimage component instead of the default one provided in the image. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.args.items": {
      "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items": {
      "description": "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done using a strategic merge patch",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply": {
      "description": "Command that consists in applying a given component definition, typically bound to a workspace event. \n For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. \n When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.attributes"
        },
        "component": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.component"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.label"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.commandType": {
      "description": "Type of workspace command",
      "enum": [
        "Exec",
        "Apply",
        "VscodeTask",
        "VscodeLaunch",
        "Composite",
        "Custom"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite": {
      "description": "Composite command that allows executing several sub-commands either sequentially or concurrently",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.attributes"
        },
        "commands": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.commands.items"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.label"
        },
        "parallel": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.parallel"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom": {
      "description": "Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.attributes"
        },
        "commandClass": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.commandClass"
        },
        "embeddedResource": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.embeddedResource"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.label"
        }
      },
      "required": [
        "commandClass",
        "embeddedResource",
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec": {
      "description": "CLI Command executed in an existing component container",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.attributes"
        },
        "commandLine": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.commandLine"
        },
        "component": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.component"
        },
        "env": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.env.items"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.group"
        },
        "hotReloadCapable": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.hotReloadCapable"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.label"
        },
        "workingDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.workingDir"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch": {
      "description": "Command providing the definition of a VsCode launch action \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.attributes"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.id"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.locationType"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.uri"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask": {
      "description": "Command providing the definition of a VsCode Task \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.attributes"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.id"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.locationType"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.uri"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.inlined": {
      "description": "Inlined content of the VsCode configuration",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.locationType": {
      "description": "Type of Vscode configuration command location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.uri": {
      "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.inlined": {
      "description": "Inlined content of the VsCode configuration",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.locationType": {
      "description": "Type of Vscode configuration command location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.uri": {
      "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.commandLine": {
      "description": "The actual command-line string \n Special variables that can be used: \n  - `$PROJECTS_ROOT`: A path where projects sources are mounted \n  - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.component": {
      "description": "Describes component to which given action relates",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.env": {
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.env.items.name"
        },
        "value": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.env.items.value"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.hotReloadCapable": {
      "description": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own. \n Default value is `false`",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.workingDir": {
      "description": "Working directory where the command should be executed \n Special variables that can be used: \n  - `${PROJECTS_ROOT}`: A path where projects sources are mounted \n  - `${PROJECT_SOURCE}`: A path to a project source (${PROJECTS_ROOT}/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.env.items": {
      "description": "Optional list of environment variables that have to be set before running the command",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.env"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.env.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.env.items.value": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.commandClass": {
      "description": "Class of command that the associated implementation component should use to process this command with the appropriate logic",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.embeddedResource": {
      "description": "Additional free-form configuration for this custom command that the implementation component will know how to use",
      "type": "object",
      "x-kubernetes-embedded-resource": true,
      "x-kubernetes-preserve-unknown-fields": true
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.commands": {
      "description": "The commands that comprise this composite command",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.parallel": {
      "description": "Indicates if the sub-commands should be executed concurrently",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.commands.items": {
      "description": "The commands that comprise this composite command",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.component": {
      "description": "Describes component that will be applied",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints": {
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items.attributes"
        },
        "exposure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items.exposure"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items.path"
        },
        "protocol": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items.protocol"
        },
        "secure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items.secure"
        },
        "targetPort": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items.targetPort"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift.inlined": {
      "description": "Inlined manifest",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift.locationType": {
      "description": "Type of Kubernetes-like location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift.name": {
      "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift.uri": {
      "description": "Location in a file fetched from a uri.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items": {
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items.exposure": {
      "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
      "enum": [
        "public",
        "internal",
        "none"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items.path": {
      "description": "Path of the endpoint URL",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items.protocol": {
      "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items.secure": {
      "description": "Describes whether the endpoint should be secured and protected by some authentication process",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints.items.targetPort": {
      "type": "integer"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints": {
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items.attributes"
        },
        "exposure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items.exposure"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items.path"
        },
        "protocol": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items.protocol"
        },
        "secure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items.secure"
        },
        "targetPort": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items.targetPort"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.inlined": {
      "description": "Inlined manifest",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.locationType": {
      "description": "Type of Kubernetes-like location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.name": {
      "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.uri": {
      "description": "Location in a file fetched from a uri.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items": {
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items.exposure": {
      "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
      "enum": [
        "public",
        "internal",
        "none"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items.path": {
      "description": "Path of the endpoint URL",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items.protocol": {
      "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items.secure": {
      "description": "Describes whether the endpoint should be secured and protected by some authentication process",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints.items.targetPort": {
      "type": "integer"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.custom.componentClass": {
      "description": "Class of component that the associated implementation controller should use to process this command with the appropriate logic",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.custom.embeddedResource": {
      "description": "Additional free-form configuration for this custom component that the implementation controller will know how to use",
      "type": "object",
      "x-kubernetes-embedded-resource": true,
      "x-kubernetes-preserve-unknown-fields": true
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.custom.name": {
      "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.args": {
      "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.command": {
      "description": "The command to run in the dockerimage component instead of the default one provided in the image. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.dedicatedPod": {
      "description": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. \n Default value is `false`",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints": {
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items.attributes"
        },
        "exposure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items.exposure"
        },
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items.path"
        },
        "protocol": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items.protocol"
        },
        "secure": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items.secure"
        },
        "targetPort": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items.targetPort"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.env": {
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.env.items.name"
        },
        "value": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.env.items.value"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.image": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.memoryLimit": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.mountSources": {
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.sourceMapping": {
      "description": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the value of the `PROJECTS_ROOT` environment variable is used.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.volumeMounts": {
      "description": "Volume that should be mounted to a component container",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.volumeMounts.items.name"
        },
        "path": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.volumeMounts.items.path"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.volumeMounts.items": {
      "description": "List of volumes mounts that should be mounted is this container.",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.volumeMounts"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.volumeMounts.items.name": {
      "description": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.volumeMounts.items.path": {
      "description": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.env.items": {
      "description": "Environment variables used in this container",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.env"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.env.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.env.items.value": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items": {
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items.exposure": {
      "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
      "enum": [
        "public",
        "internal",
        "none"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items.path": {
      "description": "Path of the endpoint URL",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items.protocol": {
      "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items.secure": {
      "description": "Describes whether the endpoint should be secured and protected by some authentication process",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints.items.targetPort": {
      "type": "integer"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.command.items": {
      "description": "The command to run in the dockerimage component instead of the default one provided in the image. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.args.items": {
      "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. \n Defaults to an empty array, meaning use whatever is defined in the image.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items": {
      "description": "Predefined, ready-to-use, workspace-related commands",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.apply": {
      "description": "Command that consists in applying a given component definition, typically bound to a workspace event. \n For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. \n When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.apply.attributes"
        },
        "component": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.apply.component"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.apply.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.apply.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.apply.label"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.commandType": {
      "description": "Type of workspace command",
      "enum": [
        "Exec",
        "Apply",
        "VscodeTask",
        "VscodeLaunch",
        "Composite",
        "Custom"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.composite": {
      "description": "Composite command that allows executing several sub-commands either sequentially or concurrently",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.composite.attributes"
        },
        "commands": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.composite.commands.items"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.composite.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.composite.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.composite.label"
        },
        "parallel": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.composite.parallel"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.custom": {
      "description": "Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.custom.attributes"
        },
        "commandClass": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.custom.commandClass"
        },
        "embeddedResource": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.custom.embeddedResource"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.custom.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.custom.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.custom.label"
        }
      },
      "required": [
        "commandClass",
        "embeddedResource",
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec": {
      "description": "CLI Command executed in an existing component container",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.attributes"
        },
        "commandLine": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.commandLine"
        },
        "component": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.component"
        },
        "env": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.env.items"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.group"
        },
        "hotReloadCapable": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.hotReloadCapable"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.id"
        },
        "label": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.label"
        },
        "workingDir": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.workingDir"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch": {
      "description": "Command providing the definition of a VsCode launch action \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.attributes"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.id"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.locationType"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.uri"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask": {
      "description": "Command providing the definition of a VsCode Task \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.attributes"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.group"
        },
        "id": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.id"
        },
        "inlined": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.inlined"
        },
        "locationType": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.locationType"
        },
        "uri": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.uri"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.inlined": {
      "description": "Inlined content of the VsCode configuration",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.locationType": {
      "description": "Type of Vscode configuration command location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.uri": {
      "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.inlined": {
      "description": "Inlined content of the VsCode configuration",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.locationType": {
      "description": "Type of Vscode configuration command location",
      "enum": [
        "Uri",
        "Inlined"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.uri": {
      "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.commandLine": {
      "description": "The actual command-line string \n Special variables that can be used: \n  - `$PROJECTS_ROOT`: A path where projects sources are mounted \n  - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.component": {
      "description": "Describes component to which given action relates",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.env": {
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.env.items.name"
        },
        "value": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.env.items.value"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.hotReloadCapable": {
      "description": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own. \n Default value is `false`",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.workingDir": {
      "description": "Working directory where the command should be executed \n Special variables that can be used: \n  - `${PROJECTS_ROOT}`: A path where projects sources are mounted \n  - `${PROJECT_SOURCE}`: A path to a project source (${PROJECTS_ROOT}/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.env.items": {
      "description": "Optional list of environment variables that have to be set before running the command",
      "items": {
        "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.env"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.env.items.name": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.env.items.value": {
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.custom.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.custom.commandClass": {
      "description": "Class of command that the associated implementation component should use to process this command with the appropriate logic",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.custom.embeddedResource": {
      "description": "Additional free-form configuration for this custom command that the implementation component will know how to use",
      "type": "object",
      "x-kubernetes-embedded-resource": true,
      "x-kubernetes-preserve-unknown-fields": true
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.custom.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.custom.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.custom.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.custom.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.custom.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.custom.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.custom.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.composite.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.composite.commands": {
      "description": "The commands that comprise this composite command",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.composite.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.composite.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.composite.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.composite.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.composite.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.composite.parallel": {
      "description": "Indicates if the sub-commands should be executed concurrently",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.composite.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.composite.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.composite.commands.items": {
      "description": "The commands that comprise this composite command",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.apply.attributes": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Optional map of free-form additional command attributes",
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.apply.component": {
      "description": "Describes component that will be applied",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.apply.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.apply.group.isDefault"
        },
        "kind": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.apply.group.kind"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.apply.id": {
      "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.apply.label": {
      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
      "type": "string"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.apply.group.isDefault": {
      "description": "Identifies the default command for a given group kind",
      "type": "boolean"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.apply.group.kind": {
      "description": "Kind of group the command is part of",
      "enum": [
        "build",
        "run",
        "test",
        "debug"
      ],
      "type": "string"
    }
  },
  "paths": {},
  "info": {
    "title": "Kubernetes",
    "version": "unversioned"
  },
  "swagger": "2.0"
}